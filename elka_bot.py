import itertools
import os
import asyncio
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω–µ –ø—É–±–ª–∏–∫—É–π –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ!)
TOKEN = "7713828114:AAExMZAdoCscjzQYqyiHDI0Z7PXOAIs4u3E"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ
products = ["–û—á–∫–∏", "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏"]
qualities = [
    "–¢—Ä–µ–Ω–¥–æ–≤—ã–µ", "–ò–º–∏–¥–∂–µ–≤—ã–µ", "–ú–æ–¥–Ω—ã–µ", "–ù–æ–≤—ã–µ", "–ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ",
    "–±—Ä–µ–Ω–¥–æ–≤—ã–µ", "–ø–æ–ª–∞—Ä–æ–∏–¥", "polaroid", "–°—Ç–∏–ª—å–Ω—ã–µ", "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ",
    "—Ö–∞–º–µ–ª–µ–æ–Ω", "Polarized"
]
for_who = [
    "–∂–µ–Ω—Å–∫–∏–µ", "–º—É–∂—Å–∫–∏–µ", "—É–Ω–∏—Å–µ–∫—Å", "–¥–ª—è –∂–µ–Ω—â–∏–Ω", "–¥–ª—è –º—É–∂—á–∏–Ω",
    "–¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö", "–¥–ª—è –º–æ–¥–Ω—ã—Ö", "–¥–ª—è —Å—Ç–∏–ª—å–Ω—ã—Ö"
]
utp = [
    "–¢—Ä–µ–Ω–¥", "–¢–æ–ø", "–•–∏—Ç", "—Ö–∏—Ç —Å–µ–∑–æ–Ω–∞", "—Ç–æ–ø —Å–µ–∑–æ–Ω–∞", "—Ç—Ä–µ–Ω–¥ —Å–µ–∑–æ–Ω–∞", "—Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
    "–í—ã—Å–æ–∫oe –∫–∞—á–µ—Å—Ç–≤o", "–ù–æ–≤–∏–Ω–∫–∞", "–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", "premium"
]
extras = [
    "2025", "NEW 2025", "–∑–∞—â–∏—Ç–∞ UV400", "–ø–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç", "–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏",
    "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "–∑–∞—â–∏—Ç–∞ –æ—Ç –£–§-–ª—É—á–µ–π", "–ü–æ–ª–∏–º–µ—Ä–Ω—ã–µ –ª–∏–Ω–∑—ã", "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ–ª–Ω—Ü–∞ UV"
]

MAX_PHRASES = 30000

# –ü—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
BASE_FOLDER = os.path.expanduser("~/Desktop/elka_phrases")

def generate_combinations(brand: str) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ —à–∞–±–ª–æ–Ω–∞–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.
    """
    all_vars = {
        "–ë—Ä–µ–Ω–¥": [brand],
        "–¢–æ–≤–∞—Ä": products,
        "–ö–∞–∫–∏–µ": qualities,
        "–î–ª—è –∫–æ–≥–æ": for_who,
        "–£–¢–ü": utp,
        "–î–æ–±–∞–≤–∫–∞": extras
    }

    var_names = list(all_vars.keys())
    unique_results = set()

    for r in range(2, 5):  # –ø–∞—Ä—ã, —Ç—Ä–æ–π–∫–∏, —á–µ—Ç–≤—ë—Ä–∫–∏
        for schema in itertools.permutations(var_names, r):
            if "–ë—Ä–µ–Ω–¥" not in schema or "–¢–æ–≤–∞—Ä" not in schema:
                continue
            lists = [all_vars[v] for v in schema]
            for combo in itertools.product(*lists):
                phrase = " ".join(combo)
                unique_results.add(phrase)

                if len(unique_results) >= MAX_PHRASES:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑: {MAX_PHRASES}")
                    return sorted(unique_results)

    return sorted(unique_results)

async def generate_and_send(update: Update, brand: str):
    chat_id = update.effective_chat.id
    bot = update.get_bot()

    try:
        await bot.send_message(chat_id, f"üîÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ—Ä–∞–∑ –¥–ª—è –±—Ä–µ–Ω–¥–∞: {brand}...")
        logger.info(f"–ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑ –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand}")

        variants = generate_combinations(brand)

        await bot.send_message(chat_id, f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} —Ñ—Ä–∞–∑. –°–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª—ã...")

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é —Ñ–∞–π–ª–æ–≤
        os.makedirs(BASE_FOLDER, exist_ok=True)

        chunk_size = 5000
        total_chunks = (len(variants) + chunk_size - 1) // chunk_size

        filenames = []
        for i in range(total_chunks):
            chunk = variants[i * chunk_size : (i + 1) * chunk_size]
            filename = os.path.join(BASE_FOLDER, f"{brand}_variants_{i + 1}.txt")
            filenames.append(filename)
            logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞—é —Ñ–∞–π–ª: {filename}")
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    f.write("\n".join(chunk))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É, —Ç.–∫. –∫—Ä–∏—Ç–∏—á–Ω–æ

        await bot.send_message(chat_id, f"üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {total_chunks} —Ñ–∞–π–ª–æ–≤...")

        for i, filename in enumerate(filenames, start=1):
            try:
                with open(filename, "rb") as f:
                    await bot.send_document(chat_id, document=f)
                await bot.send_message(chat_id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {i} –∏–∑ {total_chunks}")
                # os.remove(filename)  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª—è–ª–∏—Å—å
                logger.info(f"–§–∞–π–ª {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                await asyncio.sleep(1)  # –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
                await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")

        await bot.send_message(chat_id,
                               f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n"
                               f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {BASE_FOLDER}")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ generate_and_send: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    brand = update.message.text.strip()
    if not brand:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –±—Ä–µ–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {brand}")
    await update.message.reply_text(f"üëÄ –ü—Ä–∏–Ω—è–ª –±—Ä–µ–Ω–¥: {brand}. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–Ω—ë—Ç—Å—è –≤—Å–∫–æ—Ä–µ...")
    asyncio.create_task(generate_and_send(update, brand))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –±—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Celine), –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —Ñ—Ä–∞–∑—ã."
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_brand))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
